""""""""""""
" Behaviour

" Incompatible with vi
set nocompatible

" encoding
set encoding=utf8
scriptencoding utf-8

"""""""""""""""""
" Editor settings

" indentation
set ignorecase
set smartcase
set incsearch

" EOL settings
set ffs=unix,dos,mac

" no backups
set nobackup
set nowb
set noswapfile

" allow modified/unsaved buffers
set hid

" hide buffers instead of deleting them
set bufhidden=hide

" enable mouse support
set mouse=a

" show line numbers
set number

" reduce Esc keycode delay
set ttimeoutlen=50

" backspace and cursor keys wrap to previous/next line
set backspace=indent,eol,start whichwrap+=<,>,[,]

" disable auto insertion of comments
autocmd BufEnter * set formatoptions-=cro

" disable annoying formatting for html (help html.vim)
let html_no_rendering=1

" disable searching in include files for autocomplete
set complete-=i

" maintain the current column after various commands
set nostartofline

" default split locations - impacts help placement
set splitbelow
set splitright

" keep some rows/columns visible when moving cursor at the edges of the screen
set scrolloff=3
set sidescrolloff=3

""""""""""""""
" UI settings 

if has("gui_running")
  " remove menu bar
  set guioptions-=m
  " remove toolbar
  set guioptions-=T
  " remove left scroll bar
  set guioptions+=Ll
  set guioptions-=Ll

  if has("X11")
    set guifont=Monospace\ 12,Consolas\ 11,Courier\ New\ 10
  elseif has("gui_macvim")
    set guifont=Fira\ Mono\ for\ Powerline:h16
  elseif has("win32")
    set renderoptions=type:directx
    set guifont=RobotoMono_Nerd_Font_Mono:h11,Consolas:h11,Courier_New:h10
  endif

  set lines=40
  set columns=130

  " foldcolumn is 3 characters wide
  set foldcolumn=3
endif

" highlight with gui colors when running in the terminal
if v:version > 800
  set termguicolors
endif

" fill vertical bar with dots
set fillchars+=vert:.

" enable completion menu
set wildmenu

" always show cursor position
set ruler

" monocolor in terminal
let g:terminal_ansi_colors = ['white', 'white', 'white', 'white', 'white', 'white', 'white', 'white',
                            \ 'white', 'white', 'white', 'white', 'white', 'white', 'white', 'white']

"""""""""""""""
" Key mappings

" setup leader
let mapleader = ","
let g:mapleader = ","
let maplocalleader = ","

if has("clipboard")
  vmap <C-x> "+x
  smap <C-x> <C-g>"+x
  nmap <silent> <C-X> :call CutNonEmptyLineToClipboard()<CR>
else
  vmap <C-x> "cx
  smap <C-x> <C-g>"cx
  nmap <silent> <C-X> :call CutNonEmptyLineToCReg()<CR>
endif

" If the current line is non-empty cut it to the clipboard
" An empty line is put into the black hole registry
function! CutNonEmptyLineToClipboard()
    if match(getline('.'), '^\s*$') == -1
        normal 0"+d$
    else
        normal "_dd
    endif
endfunction

function! CutNonEmptyLineToCReg()
    if match(getline('.'), '^\s*$') == -1
        normal 0"cd$
    else
        normal "_dd
    endif
endfunction

if has("clipboard")
  " CTRL-C is Copy
  vmap <C-C> "+y

  " CTRL-V is Paste
  map <C-V>	"+gP

  " enable Paste in command mode
  cmap <C-v> <C-R>+

  exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
  exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']
else
  " clipboard unavailable, use c register
  vmap <C-C> "cy
  map <C-V>	"cgP
  cmap <C-v> <C-R>c
endif

" Enable yanked text to be pasted multiple times
xnoremap p pgvy

" Use CTRL-Q to do what CTRL-V used to do
noremap <C-Q> <C-V>

" CTRL-C to copy text from cmd line
cnoremap <C-c> <C-y>

" better movement in command line
if has("gui_running")
  cnoremap <C-H> <Left>
  cnoremap <C-L> <Right>
  cnoremap <C-A> <Home>
  cnoremap <C-E> <End>
endif

" remap : in select mode, which normally inserts text
smap : <Esc>:

if has("clipboard")
  noremap <leader>ff :let @+=expand("%:p")<CR>
  noremap <leader>fn :let @+=expand("%:t")<CR>
  noremap <leader>fd :let @+=expand("%:p:h")<CR>
else
  noremap <leader>ff :let @c=expand("%:p") \| call TmuxCopyReg("c")<CR>
  noremap <leader>fn :let @c=expand("%:t") \| call TmuxCopyReg("c")<CR>
  noremap <leader>fd :let @c=expand("%:p:h") \| call TmuxCopyReg("c")<CR>
endif

function! TmuxCopyReg(r)
  if $TMUX == ''
        return
    endif
  call system('tmux loadb -w -', getreg(a:r))
endfunc

if has("win32")
  map <leader>e :silent r! explorer .<CR>
end

nmap <leader>z :let &scrolloff=999-&scrolloff<CR>

" awesome keyboard scrolling
nmap <C-j> 3j3<C-e>
nmap <C-k> 3k3<C-y>

" change current dir
nmap <leader>cd :cd\ %:p:h<CR>

""""""""""""""
" Indentation

set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set smarttab

set autoindent

" long lines don't break at screen end
set nowrap

" long lines are market with > and < at end of screen
set listchars+=precedes:<,extends:>

""""""""""""""
" Status line

func! StlFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunc

func! StlFilename()
  if winwidth(0) > 70
    return MyGetFileTypeSymbol(expand('%:t')) . expand('%:t')
  else
    return expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  endif
endfunc

let stl_mode_map = { 'n': 'NORMAL', 'i': 'INSERT', 'R': 'REPLACE', 'v': 'VISUAL', 'V': 'V-LINE', "\<C-v>": 'V-BLOCK',
                   \ 'c': 'COMMAND', 's': 'SELECT', 'S': 'S-LINE', "\<C-s>": 'S-BLOCK', 't': 'TERMINAL' }

" mode is highlighted using hl-groups User1, User2 etc.
let stl_mode_colors = { 'n': '%1*', 'i': '%5*', 'R': '%6*', 'v': '%2*', 'V': '%2*', "\<C-v>": '%2*',
                       \'c': '%7*', 's': '%2*', 'S': '%2*', "\<C-s>": '%2*', 't': '%6*' }

set laststatus=2
set statusline=
set statusline+=%{%get(stl_mode_colors,mode(),'%1*')%} " get the UserN hightlight group and switch to it
set statusline+=\ %{get(stl_mode_map,mode(),'')}\      " mode
set statusline+=%2*                                    " switch to User2 hightlight group
set statusline+=\ %{StlFilename()}                     " filename
set statusline+=%2*
set statusline+=\ %r%m                                 " read-only, modified flags
set statusline+=%=\ 
set statusline+=%3*
set statusline+=%{StlFiletype()}\                      " filetype
set statusline+=%4*
set statusline+=\ %<%P\                                " percent
set statusline+=%5*
set statusline+=\ %l                                   " line number
set statusline+=:                                      " :
set statusline+=%c\                                    " column number

""""""""""""""""""
" Custom commands

" show highlight group
command! Hgroup :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . "> "
                  \ . "trans<". synIDattr(synID(line("."),col("."),0),"name") . "> "
                  \ . "lo<". synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"

" find text in all open buffers
function! Findb(text)
    exe "cex [] | silent! bufdo vimgrepa /" . a:text . "/ %"
    :copen
endfunction
command! -nargs=1 Findo call Findo(<q-args>)

function! ReturnHighlightTerm(group, term)
  let output = execute('hi ' . a:group)
  return matchstr(output, a:term.'=\zs\S*\>')
endfunction

" toggle transparency
let s:hiBgData = { 'on': 0, 'vals': {},
      \'groups' : ['Normal', 'NonText', 'SignColumn', 'FoldColumn', 'LineNr', 'EndOfBuffer'] }

function! Transparent()
  if !s:hiBgData.on
    for n in s:hiBgData.groups
      let s:hiBgData.vals[n] = ReturnHighlightTerm(n, 'guibg')
      exe 'hi ' . n . ' guibg=NONE'
    endfor
    let s:hiBgData.on = 1
  else
    for n in s:hiBgData.groups
      if len(s:hiBgData.vals[n]) > 0
        exe 'hi ' . n . ' guibg=' . s:hiBgData.vals[n]
      endif
    endfor
    let s:hiBgData.on = 0
  endif
endfunc
command! Transparent call Transparent()

" toggle terminal
function! ToggleTerminal()
  let l:termNums = term_list()
  let l:termWins = filter(getwininfo(), 'v:val.terminal')

  if index(l:termNums, bufnr('%')) >= 0
      " current buffer is a terminal
      execute 'hid'
  elseif len(l:termWins) > 0
      " switch to the terminal buffer window
      execute 'tabn' . l:termWins[0].tabnr
      execute l:termWins[0].winnr . 'wincmd w'
  elseif len(l:termNums) > 0
      " show the terminal buffer in the current window
      execute 'sb ' . l:termNums[0]
  else
      " no terminal, start one
      execute 'term ++kill=hup'
  endif
endfunction

map <silent> <C-\> :call ToggleTerminal()<CR>
tnoremap <Esc> <C-\><C-n>
tnoremap <silent> <C-\> <C-W>:call ToggleTerminal()<CR>

"""""""""""""""""""""
" File type settings

autocmd FileType markdown setlocal tabstop=4|set shiftwidth=4|set expandtab
highlight link markdownError Normal
autocmd FileType vim setlocal iskeyword-=#
autocmd FileType * setlocal iskeyword-=:
autocmd FileType css,scss,html,eruby setlocal iskeyword +=-
autocmd TerminalOpen * set nonumber|set norelativenumber|set signcolumn=no|set nobuflisted

""""""""""
" Plugins

" Pathogen is still needed for older versions of vim
execute pathogen#infect()

let g:BufstopAutoSpeedToggle = 1

let g:vim_tmux_clipboard#loadb_option = '-w'

let g:tmux_navigator_no_mappings = 1

let g:termdebug_config = {
  \ 'command' : ['gdb', '-ex', 'set history save on'],
  \ 'sign' : "\U1F151",
  \ 'wide' : 1
  \ }

call plug#begin('~/.vimdata')

Plug 'mihaifm/bufstop'
Plug 'mihaifm/4colors'
Plug 'easymotion/vim-easymotion'
Plug 'mbbill/undotree'
Plug 'roxma/vim-tmux-clipboard'
Plug 'tpope/vim-commentary'
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

if !empty(globpath(&rtp, 'colors/4colors.vim'))
  colorscheme 4colors
endif

filetype plugin indent on
syntax on

"""""""""""""""
" Legacy stuff

if &term == "dtterm"
  set t_KD=^<Delete>
  fixdel
endif

set secure
